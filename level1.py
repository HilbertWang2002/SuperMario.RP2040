import framebuf
import time
from my_text import my_text
FPS = 24
refresh_timing = int(1000/FPS)

def load_image(path, w=16, h=16):
    with open(path, 'rb') as f:
        return framebuf.FrameBuffer(bytearray(f.read(w*h*2)), w, h, framebuf.RGB565)

def level1(display, my_input,fbuf):
    #variable init
    frame_timing = 1
    frame = 0
    fbuf.fill(32620)
    level1_map = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 26, 27, 27, 27, 28, 0, 0, 0, 0, 29, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 26, 27, 27, 27, 28, 0, 0, 0, 0, 29, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 26, 27, 27, 27, 28, 0, 0, 0, 0, 29, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 26, 27, 27, 27, 28, 0, 0, 0, 0, 29, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 26, 27, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 29, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 30, 30, 31, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 29, 30, 30, 30, 31, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 30, 30, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 10, 10, 10, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 3, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 11, 12, 13, 0, 0, 0, 0, 0, 0], [0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 18, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 18, 0, 0, 0, 5, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 18, 0, 0, 0, 33, 0, 0, 0, 10, 14, 14, 14, 10, 0, 0, 0, 0, 0], [0, 17, 20, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 17, 20, 19, 0, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 20, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 17, 20, 19, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 18, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 17, 20, 19, 0, 0, 33, 0, 0, 0, 12, 12, 15, 12, 12, 0, 0, 0, 0, 0], [17, 20, 21, 22, 19, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 25, 0, 17, 20, 19, 0, 0, 0, 23, 24, 25, 0, 0, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0, 23, 24, 24, 25, 0, 0, 0, 8, 9, 17, 20, 21, 22, 19, 0, 0, 8, 9, 23, 24, 24, 24, 25, 17, 20, 19, 0, 0, 0, 0, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 24, 25, 0, 0, 0, 17, 20, 21, 22, 19, 0, 0, 0, 0, 0, 0, 23, 24, 24, 24, 25, 17, 20, 19, 0, 0, 0, 0, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 24, 24, 5, 5, 5, 5, 17, 20, 21, 22, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 25, 17, 20, 19, 8, 9, 0, 0, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 17, 20, 21, 22, 19, 0, 5, 0, 0, 0, 12, 12, 16, 12, 12, 25, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
    visiable_left = 0
    offset = 0
    x = 0
    #load resource
    #fbuf = framebuf.FrameBuffer(bytearray(240 * 180 * 2), 240, 180, framebuf.RGB565)
    mario_normal = load_image('images/mario_normal.bin', 12, 16)
    ground = load_image('images/map_tiles/0-0.bin')
    wall = load_image('images/map_tiles/0-1.bin')
    unknown = load_image('images/map_tiles/0-24.bin')
    known = load_image('images/map_tiles/0-3.bin')
    great_wall = load_image('images/map_tiles/28-0.bin')
    tube_upleft = load_image('images/map_tiles/224-0.bin')
    tube_upright = load_image('images/map_tiles/224-1.bin')
    tube_downleft = load_image('images/map_tiles/252-0.bin')
    tube_downright = load_image('images/map_tiles/252-1.bin')
    castle1 = load_image('images/map_tiles/0-11.bin')
    castle2 = load_image('images/map_tiles/0-12.bin')
    castle3 = load_image('images/map_tiles/0-13.bin')
    castle4 = load_image('images/map_tiles/0-14.bin')
    castle5 = load_image('images/map_tiles/28-11.bin')
    castle6 = load_image('images/map_tiles/28-12.bin')
    castle7 = load_image('images/map_tiles/28-13.bin')
    tree1 = load_image('images/map_tiles/224-8.bin')
    tree2 = load_image('images/map_tiles/224-9.bin')
    tree3 = load_image('images/map_tiles/224-10.bin')
    tree4 = load_image('images/map_tiles/252-8.bin')
    tree5 = load_image('images/map_tiles/252-9.bin')
    tree6 = load_image('images/map_tiles/252-10.bin')
    small_tree1 = load_image('images/map_tiles/252-11.bin')
    small_tree2 = load_image('images/map_tiles/252-12.bin')
    small_tree3 = load_image('images/map_tiles/252-13.bin')
    cloud1 = load_image('images/map_tiles/616-0.bin')
    cloud2 = load_image('images/map_tiles/616-1.bin')
    cloud3 = load_image('images/map_tiles/616-2.bin')
    cloud4 = load_image('images/map_tiles/644-0.bin')
    cloud5 = load_image('images/map_tiles/644-1.bin')
    cloud6 = load_image('images/map_tiles/644-2.bin')
    flag_head = load_image('images/map_tiles/280-13.bin')
    flag_pole = load_image('images/map_tiles/308-16.bin')
        
    
    #game loop
    while True:
        fbuf.fill(32620)
        #display FPS
        start_time = time.ticks_ms()
        
        #draw
        #map
        for i in range(12):
            for j in range(16):
                _key = level1_map[i][j+visiable_left]
                if _key==0:
                    pass
                elif _key==1:
                    fbuf.blit(ground, j*16-offset, i*16)
                elif _key==2:
                    fbuf.blit(wall, j*16-offset, i*16)
                elif _key==3:
                    fbuf.blit(unknown, j*16-offset, i*16)
                elif _key==5:
                    fbuf.blit(great_wall, j*16-offset, i*16)
                elif _key==6:
                    fbuf.blit(tube_upleft, j*16-offset, i*16, 65535)
                elif _key==7:
                    fbuf.blit(tube_upright, j*16-offset, i*16, 65535)
                elif _key==8:
                    fbuf.blit(tube_downleft, j*16-offset, i*16, 65535)
                elif _key==9:
                    fbuf.blit(tube_downright, j*16-offset, i*16, 65535)
                elif _key==10:
                    fbuf.blit(castle1, j*16-offset, i*16, 65535)
                elif _key==11:
                    fbuf.blit(castle2, j*16-offset, i*16)
                elif _key==12:
                    fbuf.blit(castle3, j*16-offset, i*16)
                elif _key==13:
                    fbuf.blit(castle4, j*16-offset, i*16)
                elif _key==14:
                    fbuf.blit(castle5, j*16-offset, i*16)
                elif _key==15:
                    fbuf.blit(castle6, j*16-offset, i*16)
                elif _key==16:
                    fbuf.blit(castle7, j*16-offset, i*16)
                elif _key==17:
                    fbuf.blit(tree1, j*16-offset, i*16)
                elif _key==18:
                    fbuf.blit(tree2, j*16-offset, i*16)
                elif _key==19:
                    fbuf.blit(tree3, j*16-offset, i*16)
                elif _key==20:
                    fbuf.blit(tree4, j*16-offset, i*16)
                elif _key==21:
                    fbuf.blit(tree5, j*16-offset, i*16)
                elif _key==22:
                    fbuf.blit(tree6, j*16-offset, i*16)
                elif _key==23:
                    fbuf.blit(small_tree1, j*16-offset, i*16)
                elif _key==24:
                    fbuf.blit(small_tree2, j*16-offset, i*16)
                elif _key==25:
                    fbuf.blit(small_tree3, j*16-offset, i*16)
                elif _key==26:
                    fbuf.blit(cloud1, j*16-offset, i*16)
                elif _key==27:
                    fbuf.blit(cloud2, j*16-offset, i*16)
                elif _key==28:
                    fbuf.blit(cloud3, j*16-offset, i*16)
                elif _key==29:
                    fbuf.blit(cloud4, j*16-offset, i*16)
                elif _key==30:
                    fbuf.blit(cloud5, j*16-offset, i*16)
                elif _key==31:
                    fbuf.blit(cloud6, j*16-offset, i*16)
                elif _key==32:
                    fbuf.blit(flag_head, j*16-offset, i*16)
                elif _key==33:
                    fbuf.blit(flag_pole, j*16-offset, i*16)
        my_text(fbuf, 'mario', 16, 8)
        my_text(fbuf, '000000', 16, 16)
        my_text(fbuf, 'x00', 88, 16)
        my_text(fbuf, 'world', 132, 8)
        my_text(fbuf, '1-1', 140, 16)
        my_text(fbuf, 'time', 192, 8)
        my_text(fbuf, f'fps-{int(1000/(frame_timing))}', 0, 0)
        display.blit_buffer(fbuf, 0, 30, 240, 180)
        
        #user input
        if my_input.x()==-1:
            if x>0:
                x -= 5

        elif my_input.x()==1:
            if x<3136:
                x += 5
        offset = x%16
        visiable_left = x//16
        #limit FPS
        frame_timing = time.ticks_ms()-start_time
        if(frame_timing<refresh_timing):
            time.sleep_ms(refresh_timing - frame_timing)
            frame_timing = refresh_timing
        frame+=1
    
